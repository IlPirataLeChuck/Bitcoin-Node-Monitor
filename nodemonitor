#! /usr/bin/bash

source "nodemonitor.func"
source "nodemonitor.conf"

daemon="bitcoind" #Nome del daemon da verificare
export LC_NUMERIC=en_US.UTF-8
COLUMNS=`tput cols`
ROWS=`tput lines`

USEDROWS=41 #Numero di righe usate per scritte e titoli (per calcolare quante ne rimangono per visualizzare i blocchi)
if [ $BLOCKS_LIST_DIM == "AUTO" ]; then
  if [ $ROWS -gt $USEDROWS ]; then
    BLOCKS_LIST_DIM=$((ROWS - USEDROWS))
    if [ $BLOCKS_LIST_DIM -gt $BLOCKS_LIST_MAX ]; then BLOCKS_LIST_DIM=$BLOCKS_LIST_MAX; fi
  else
    BLOCKS_LIST_DIM=2
  fi
fi

CLI="bitcoin-cli -datadir=$BLOCKCHAIN"
firstrun=true
media_tx_per_block=0

clear
echo "Checking bitcoind daemon..."

# Verifica se il processo è in esecuzione
if ps -ef | grep "$daemon" | grep -v grep > /dev/null; then
  echo "$daemon è già in esecuzione"
else
 echo -n "Launching daemon"; waitecho 10
 RUN=`/usr/local/bin/bitcoind -daemon --datadir=$BLOCKCHAIN`
 echo -n "Daemon launched, please wait"; waitecho 10
fi

  ################################
  ################################
  ##                            ##
  ##    BEGINNIG OF THE LOOP    ##
  ##                            ##
  ################################
  ################################


while :
do

# Ottenere l'indirizzo IP pubblico usando curl
public_ip=$(curl -s ifconfig.me)

# Ottenere l'indirizzo IP locale usando ip
local_ip=$(ip a | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | cut -d/ -f1)

if [ $firstrun == true ] ; then
 echo "Getting blockchain info..."
fi

BC=`$CLI getblockchaininfo`
if [ $? == 0 ]; then
  read_ok=true
else
  read_ok=false
fi
if [ $read_ok = true ] ; then
  if [ $firstrun == true ] ; then
   echo "Getting network info..."
  fi
  NW=`$CLI getnetworkinfo`

  CHAIN=`echo $BC | jq '.chain'`
  BLOCKS=`echo $BC | jq '.blocks'`
  HEADERS=`echo $BC | jq '.headers'`
  SIZE=`echo $BC | jq '.size_on_disk'`
  CHAIN=`echo $BC | jq '.chain'`

  VERSION=`echo $NW | jq '.version'`
  SUBVERSION=`echo $NW | jq '.subversion'`
  ACTIVE=`echo $NW | jq '.networkactive'`
  CONNECTIONS_TOT=`echo $NW | jq '.connections'`
  CONNECTIONS_IN=`echo $NW | jq '.connections_in'`
  CONNECTIONS_OUT=`echo $NW | jq '.connections_out'`

  MANCANTI=$((HEADERS-BLOCKS))
  blocchi_totali=$(print_number $HEADERS)
  blocchi_locali=$(print_number $BLOCKS)
  blocchi_mancanti=$(print_number $MANCANTI)
  LAST_BLOCK_NUMBER=$BLOCKS

##################
# VALORE BTC EUR #
##################


  BTCPRICE=$(curl -m 10 -s "$EXT_URL")
  if [ $? -ne 0 ]; then
    BTCPRICETXT="Prezzo BTC non disponibile"
  else
    EURPRICETXT=""
    #echo "...done"
    BTCPRICE24H=`echo $BTCPRICE | jq '.price_24h'`
    BTCPRICELAST=`echo $BTCPRICE | jq '.last_trade_price'`
    BTCPRICECHANGE=$( echo "scale=2; ($BTCPRICELAST * 100 / $BTCPRICE24H) - 100" | bc)
    BTCPRICECHANGE=$(printf "%.2f" $BTCPRICECHANGE)
    BTCPRICEFORMAT=$(echo "$BTCPRICELAST/1" | bc)
    BTCPRICEFORMAT=$(print_number $BTCPRICEFORMAT)

    #Simbolo BTC
    #BTCSYM=$(echo -e "\u20BF ") #Sarebbe quello corretto ma potrebbe non funzionare
    BTCSYM=$(echo -e "\u0042 ")

    #Simbolo Sats
    #SATSYM=$(echo -e "\u2250 ") #Sarebbe quello corretto ma potrebbe non funzionare
    SATSYM=$(echo -e "\u015F ")

    #Simbolo Euro
    EURSYM=$(echo -e "\u20AC ")

    BTCSATS=100000000
    BTCPRICETXT="1$BTCSYM $EURSYM$BTCPRICEFORMAT (%$BTCPRICECHANGE)"
    PRICECHECK=$(echo "$BTCPRICELAST > $BTCPRICE24H" | bc -l)
    if [ $PRICECHECK -eq 1 ]; then
      BTCCOLOR="green"
    else
      BTCCOLOR="red"
    fi

    ### CONVERSIONE EURO/SATS #############
    firstcycle=true
    for euro in "${EURO[@]}"; do
      EUR_CONV=$(echo "$euro*$BTCSATS/$BTCPRICELAST" | bc)
      if [ $EUR_CONV -gt 10000000 ]; then
        EUR_CONV=$(echo "scale=3; $EUR_CONV/$BTCSATS" | bc)
        EUR_CONV=$(printf "%.3f" $EUR_CONV)
        SYMBOL=$BTCSYM
      else
        SYMBOL=$SATSYM
      fi
      EUR_CONV=$(print_number $EUR_CONV)
      euro=$(print_number $euro)
      if [ $firstcycle == false ]; then EURPRICETXT+=$(echo -n " | "); fi
      EURPRICETXT+=$(echo -n "€$euro = $SYMBOL$EUR_CONV")
      firstcycle=false
    done
    ########################################

  fi

##################


  if [ $firstrun == true ] ; then
   echo "Getting last blocks info..."
  fi

  if [[ $MANCANTI -gt 0 ]]; then
    HOW_MANY_BLOCKS=1
  else
    HOW_MANY_BLOCKS=$BLOCKS_LIST_DIM
  fi

  for ((i=0;i<$HOW_MANY_BLOCKS;i++))
  do
    BLOCK_NUMBER=$((LAST_BLOCK_NUMBER-i))
    if [ $firstrun == true ]; then
      NUM=$((i+1))
      echo "[$BLOCK_NUMBER($NUM/$HOW_MANY_BLOCKS)]"
    fi
    if [ -z "${BLOCK_HEIGHT[$BLOCK_NUMBER]}" ]; then
      BLOCK_HASH=`$CLI getblockhash $BLOCK_NUMBER`
      BLOCK=`$CLI getblock $BLOCK_HASH`
      BLOCK_SIZE[$BLOCK_NUMBER]=`echo $BLOCK | jq '.size'`
      BLOCK_TIME[$BLOCK_NUMBER]=`echo $BLOCK | jq '.time'`
      BLOCK_HEIGHT[$BLOCK_NUMBER]=`echo $BLOCK | jq '.height'`
      BLOCK_NTX[$BLOCK_NUMBER]=`echo $BLOCK | jq '.nTx'`
      BLOCK_CONF[$BLOCK_NUMBER]=`echo $BLOCK | jq '.confirmations'`
    fi
  done
  echo

  ### CALCOLO IL NUMERO MEDIO DI TRANSAZIONI PER BLOCCO
  tot_tx=0
  for tx_num in "${BLOCK_NTX[@]}"; do
    tot_tx=$((tot_tx + tx_num))
  done
  num_blocchi=${#BLOCK_NTX[@]}
  media_tx_per_block=$((tot_tx / num_blocchi))
  ###

fi

if [ $firstrun == false ] ; then 
 clear
fi

if [ $read_ok == true ] ; then
### UPTIME ######
  UPTIME_SEC=$($CLI uptime)
  UPTIME=$(seconds_converter $UPTIME_SEC)
#################
fi

DATA=$(date "+%A, %d %b %Y")
ORA=$(date "+%H:%M")



echo
change_color bold red_bg
fullrow "*"
lcr_text "$DATA" "$TITLE" "$ORA"
fullrow "*"
change_color reset
echo

if [ $read_ok == true ] ; then
 VER=$(echo "Versione corrente: $VERSION $SUBVERSION")
 UPT=$(echo "Uptime: $UPTIME")
 lr_text "$VER" "$UPT"

 HR_SIZE=$(human_readable_bytes $SIZE)
 SIZE_LABEL="Dimensione Blockchain: $HR_SIZE"


 STATUS_LABEL="Stato del network: "
 if [ $ACTIVE == true ] ; then
   STATUS="ATTIVO"
   CONNECTIONS="Connessioni in<>out: $CONNECTIONS_IN<>$CONNECTIONS_OUT"

 else
   STATUS="NON ATTIVO"
   CONNECTIONS=""
 fi

 lr_text "$STATUS_LABEL$STATUS" "$SIZE_LABEL"
 lr_text "$CONNECTIONS" "$BTCPRICETXT" "" "$BTCCOLOR bold"

 if [[ $MANCANTI -gt 0 ]]; then
  BLOCCHI_LTEXT="Blocchi totali/locali: $blocchi_totali / $blocchi_locali"
  BLOCCHI_RTEXT="Mancanti: $blocchi_mancanti"
 else
  BLOCCHI_LTEXT="Blocchi totali: $blocchi_totali"
  MINED=$(mined_bitcoins $BLOCKS)
  bitcoin_minati=$(print_number $MINED)
  PERCENT=$(echo "scale=2; $MINED * 100 / 21000000" | bc)
  BLOCCHI_RTEXT="Bitcoin totali minati: $bitcoin_minati ($PERCENT%)"
 fi
 lr_text "$BLOCCHI_LTEXT" "$BLOCCHI_RTEXT"
 lr_text "IP (loc/pub): $local_ip / $public_ip" "$EURPRICETXT" "" "cyan bold"
 echo

 NOW=$(date +%s)
 LB_TIME=${BLOCK_TIME[$LAST_BLOCK_NUMBER]}
 SEC_FROM_LAST_BLOCK=$((NOW - LB_TIME))
 TIME_FROM_LAST_BLOCK=$(seconds_converter $SEC_FROM_LAST_BLOCK)

################
###   INFO   ###
################
  MP=`$CLI getmempoolinfo`
  MP_LOADED=`echo $MP | jq '.loaded'`
  MP_SIZE=`echo $MP | jq '.size'`
  MP_TX_NUM=$(print_number $MP_SIZE)
  MP_BYTES=`echo $MP | jq '.bytes'`
  MP_HR_BYTES=$(human_readable_bytes $MP_BYTES)
  MP_USAGE=`echo $MP | jq '.usage'`
  MP_FEES=`echo $MP | jq '.total_fee'`

  #### FEES ###################################
  FEES_TXT="Stima fees (blocchi->sat/vB)"
  for num_block_fees in "${STIMA_BLOCCHI[@]}"; do
    STIMA=`$CLI estimatesmartfee $num_block_fees`
    FEE_BTC=$(echo "$STIMA" | jq -c '.feerate' | xargs printf "%f")
    FEE_SATS_KVB=$(echo "($FEE_BTC * 100000000)/1" | bc)
    FEE_SATS_VB=$(echo "scale=2; $FEE_SATS_KVB/1024" | bc)
    FEES_TXT+=" | $num_block_fees -> $FEE_SATS_VB"
  done
  ##############################################


  if [[ $media_tx_per_block -eq 0 ]]; then
    ntx_medie_txt=""
    n_blocchi_txt=""
  else
    ntx_medie_txt="Media transazioni per blocco: $media_tx_per_block"
    n_blocchi=$((MP_SIZE/media_tx_per_block))
    n_blocchi_txt="Stima blocchi nella mempool: $n_blocchi"
  fi

  ntx_txt="Numero transazioni in mempool: $MP_TX_NUM"
  dim_tx_txt="Dimensione totale transazioni: $MP_HR_BYTES"

  change_color bold red_bg
  centertext_fullrow "INFO" "*"
  change_color reset
  echo
  lr_text "$ntx_txt" "$ntx_medie_txt"
  lr_text "$dim_tx_txt" "$n_blocchi_txt"
  lr_text "Fees totali: $MP_FEES BTC" "$FEES_TXT" "" "purple bold"
  echo

###########################
## DIFFICULTY ADJUSTMENT ##
###########################

MINING=`$CLI getmininginfo`
DIFFICULTY=`echo $MINING | jq '.difficulty'`
HR_DIFF=$(human_readable_number "$DIFFICULTY")

PREV_BLOCK_DIFF=$((LAST_BLOCK_NUMBER - 2016))
PREV_BLOCK_DIFF_HASH=`$CLI getblockhash $PREV_BLOCK_DIFF`
PBD=`$CLI getblock $PREV_BLOCK_DIFF_HASH`
PBD_DIFF=`echo $PBD | jq '.difficulty'`
HR_PREV_DIFF=$(human_readable_number "$PBD_DIFF")
DIFF_CHANGE=$(echo "scale=2; ( $DIFFICULTY * 100 / $PBD_DIFF) - 100" | bc)
CHECK_DIFF=$(echo "$DIFF_CHANGE * 100 / 1" | bc)
if [[ $CHECK_DIFF -gt 0 ]]; then DIFF_CHANGE="+$DIFF_CHANGE"; fi

if [[ $MANCANTI -eq 0 ]]; then
 BLOCKS_FROM_DIFF_CHANGE=$(($LAST_BLOCK_NUMBER % 2016))
 LAST_DIFF_CHANGE=$(($LAST_BLOCK_NUMBER-$BLOCKS_FROM_DIFF_CHANGE))
 NEXT_DIFF_CHANGE=$(($LAST_DIFF_CHANGE+2016))
 BLOCKS_TO_DIFF_CHANGE=$(($NEXT_DIFF_CHANGE-$LAST_BLOCK_NUMBER))

 LAST_DIFF_HASH=`$CLI getblockhash $LAST_DIFF_CHANGE`
 LD=`$CLI getblock $LAST_DIFF_HASH`
 LD_TIME=`echo $LD | jq '.time'`
 if [[ $BLOCKS_FROM_DIFF_CHANGE -eq 0 ]]; then
   TEMPO_MEDIO_SEC=600
 else
   TEMPO_MEDIO_SEC=$(((LB_TIME - LD_TIME) / (LAST_BLOCK_NUMBER - LAST_DIFF_CHANGE)))
 fi

 BLOCCHI_ORA=$( echo "scale=2; 3600 / $TEMPO_MEDIO_SEC" | bc)
 BLOCCHI_GIORNO=$( echo "scale=0; 3600*24 / $TEMPO_MEDIO_SEC" | bc)
 BLOCCHI_SETTIMANA=$( echo "scale=0; 3600*24*7 / $TEMPO_MEDIO_SEC" | bc)
 BLOCCHI_MESE=$( echo "scale=0; 3600*24*30 / $TEMPO_MEDIO_SEC" | bc)
 BLOCCHI_ANNO=$( echo "scale=0; 3600*24*365 / $TEMPO_MEDIO_SEC" | bc)
 SCARTO=$( echo "scale=2; 60000 / $TEMPO_MEDIO_SEC - 100" | bc)
 if [[ $TEMPO_MEDIO_SEC -lt 600 ]]; then SCARTO="+$SCARTO"; fi
 TEMPO_MEDIO=$(seconds_converter $TEMPO_MEDIO_SEC)
 if [[ $SEC_FROM_LAST_BLOCK -gt 600 ]]; then
   CORREZIONE=600
 else
   CORREZIONE=$SEC_FROM_LAST_BLOCK
 fi
 SEC_TO_DIFF_CHANGE=$((BLOCKS_TO_DIFF_CHANGE * TEMPO_MEDIO_SEC - CORREZIONE))
 SEC_TO_DIFF_CHANGE=$((SEC_TO_DIFF_CHANGE - (SEC_TO_DIFF_CHANGE % 60) + 60 )) #arrotondo a minuti
 TIME_TO_DIFF_CHANGE=$(seconds_converter $SEC_TO_DIFF_CHANGE)
 LAST_DIFF_DATE=$(readable_date $LD_TIME)
 NEXT_DIFF_DATE=$((NOW + SEC_TO_DIFF_CHANGE))


 NEXT_DIFF_DATE=$(readable_date $NEXT_DIFF_DATE)

 change_color bold red_bg
 centertext_fullrow "DIFFICULTY" "*"
 change_color reset
 echo
 change_color bold cyan
 difficulty_progress $LAST_BLOCK_NUMBER 2
 change_color reset
 lr_text "$LAST_DIFF_DATE" "$NEXT_DIFF_DATE"
 echo

 LTEXT="Tempo medio per blocco: $TEMPO_MEDIO"
 RTEXT="B/h: $BLOCCHI_ORA | B/d: $BLOCCHI_GIORNO | B/W: $BLOCCHI_SETTIMANA | B/M: $BLOCCHI_MESE | B/Y: $BLOCCHI_ANNO"
 lr_text "$LTEXT" "$RTEXT"

 lr_text "Current difficulty: $HR_DIFF" "Adjustement stimato: $SCARTO%"
 lr_text "Previous difficulty: $HR_PREV_DIFF" "Adjustement precedente: $DIFF_CHANGE%"
 echo -n "Prossimo difficulty adjustment stimato fra: "
 change_color bold purple underline
 echo -n "$TIME_TO_DIFF_CHANGE"
 change_color reset
 echo
 echo
fi


if [[ $MANCANTI -eq 0 ]]; then


#############
## HALVING ##
#############

  BLOCKS_FROM_HALVING=$(($LAST_BLOCK_NUMBER % 210000))
  LAST_HALVING=$(($LAST_BLOCK_NUMBER-$BLOCKS_FROM_HALVING))
  NEXT_HALVING=$(($LAST_HALVING + 210000))
  BLOCKS_TO_HALVING=$(($NEXT_HALVING - $LAST_BLOCK_NUMBER))

  #LAST_HALV_HASH=`$CLI getblockhash $LAST_HALVING`
  #LH=`$CLI getblock $LAST_HALV_HASH`
  #LH_TIME=`echo $LH | jq '.time'`

  LH_TIME=$(get_block_time $LAST_HALVING)
  first_block=0
  first_block_time=$(get_block_time $first_block)
  #LB_TIME=${BLOCK_TIME[$LAST_BLOCK_NUMBER]}
  tempo_medio_blocco=$(( (LB_TIME - first_block_time) / (LAST_BLOCK_NUMBER - first_block) ))
  TEMPO_MEDIO_BLOCCHI=$(seconds_converter $tempo_medio_blocco)
  halv_row2=""
  ciclo_corrente=$((LAST_BLOCK_NUMBER / 210000))
  tempo_medio_ciclo_sec=$(( (LH_TIME - first_block_time) / ciclo_corrente ))
  tempo_medio_ciclo_time=$(seconds_converter $tempo_medio_ciclo_sec)

  ###PREVISIONE HALVING ###

  ### METODO 1 ###
if [[ $metodo -eq 1 ]]; then
  BLOCKS_MEDIA=210000

  if [[ $LAST_BLOCK_NUMBER -lt $BLOCKS_MEDIA ]]; then BLOCKS_MEDIA=$((LAST_BLOCK_NUMBER-1)); fi
  FIRST_BLOCK_NUM=$((LAST_BLOCK_NUMBER - BLOCKS_MEDIA))
  FIRST_BLOCK_HASH=`$CLI getblockhash $FIRST_BLOCK_NUM`
  FB=`$CLI getblock $FIRST_BLOCK_HASH`
  FB_TIME=`echo $FB | jq '.time'`
  TEMPO_MEDIO_HALV_SEC=$(( (LB_TIME - FB_TIME) / BLOCKS_MEDIA ))
  TEMPO_MEDIO_HALV=$(seconds_converter $TEMPO_MEDIO_HALV_SEC)

  SECS_TO_HALVING=$((BLOCKS_TO_HALVING * TEMPO_MEDIO_HALV_SEC))
  TIME_TO_HALVING=$(seconds_converter $SECS_TO_HALVING)

  ### METODO 2 ###
elif [[ $metodo -eq 2 ]]; then
  REF_BLOCK_NUM=$(($LAST_HALVING - $BLOCKS_TO_HALVING))
  REF_BLOCK_HASH=`$CLI getblockhash $REF_BLOCK_NUM`
  RB=`$CLI getblock $REF_BLOCK_HASH`
  RB_TIME=`echo $RB | jq '.time'`
  LAST_HALVING_TIME_TAKEN=$((LH_TIME - RB_TIME))

  SECS_TO_HALVING=$LAST_HALVING_TIME_TAKEN
  TIME_TO_HALVING=$(seconds_converter $SECS_TO_HALVING)

  ### METODO 3 ###
elif [[ $metodo -eq 3 ]]; then
  SECS_TO_HALVING=$((TEMPO_MEDIO_SEC*BLOCKS_TO_HALVING))
  TIME_TO_HALVING=$(seconds_converter $SECS_TO_HALVING)

  ### METODO 4 ###
elif [[ $metodo -eq 4 ]]; then
  halv_block=210000
  ref_block=$((halv_block-BLOCKS_TO_HALVING))
  min_time=0
  max_time=0
  tempo_medio=0

  for (( i=1 ; i <= $ciclo_corrente ; i++ )); do
    halv_block_time=$(get_block_time $halv_block)
    ref_block_time=$(get_block_time $ref_block)
    halv_time=$((halv_block_time - ref_block_time))
    tempo_medio=$((tempo_medio + halv_time))
    if [[ $min_time -eq 0 ]]; then
      min_time=$halv_time
    fi
    if [[ $halv_time -lt $min_time ]]; then min_time=$halv_time; fi
    if [[ $halv_time -gt $max_time ]]; then max_time=$halv_time; fi
    halv_block=$((halv_block + 210000))
    ref_block=$((ref_block + 210000))
  done
  tempo_medio=$(( tempo_medio / ciclo_corrente ))
  tempo_medio_time=$(seconds_converter $tempo_medio)
  next_halv_mid_time=$((LB_TIME + tempo_medio))
  next_halv_low_time=$((LB_TIME + min_time))
  next_halv_high_time=$((LB_TIME + max_time))
  next_halv_mid_date=$(readable_date $next_halv_mid_time)
  next_halv_low_date=$(readable_date $next_halv_low_time)
  next_halv_high_date=$(readable_date $next_halv_high_time)
  TIME_TO_HALVING=$tempo_medio_time
  next_halv_text="$next_halv_low_date <> $next_halv_high_date"
  halv_row2="Previsione: $next_halv_mid_date"
fi




  LAST_HALV_DATE=$(readable_date $LH_TIME)
  NEXT_HALV_DATE=$((NOW + SECS_TO_HALVING))
  NEXT_HALV_DATE=$(readable_date $NEXT_HALV_DATE)

  if [[ $metodo -eq 4 ]]; then
    NEXT_HALV_DATE=$next_halv_text
  fi

  change_color bold red_bg
  centertext_fullrow "HALVING" "*"
  change_color reset
  echo
  change_color bold cyan
  halving_progress $LAST_BLOCK_NUMBER 2
  change_color reset
  lr_text "$LAST_HALV_DATE" "$NEXT_HALV_DATE"
  lr_text "" "$halv_row2"
  REWARD=$(get_reward $LAST_BLOCK_NUMBER)
  REWARD_TXT="Reward attuale: $REWARD BTC"
  lr_text "$REWARD_TXT" ""
  echo -n "Tempo medio di tutti i blocchi: "
  change_color bold green
  echo -n "$TEMPO_MEDIO_BLOCCHI"
  change_color reset
  echo
  lr_text "Prossimo halving stimato fra: $TIME_TO_HALVING" "Durata media ciclo: $tempo_medio_ciclo_time"
  echo
 fi


###########
## BLOCK ##
###########

  NOW=$(date +%s)
  LB_TIME=${BLOCK_TIME[$LAST_BLOCK_NUMBER]}
  SEC_FROM_LAST_BLOCK=$((NOW - LB_TIME))
  TIME_FROM_LAST_BLOCK=$(seconds_converter $SEC_FROM_LAST_BLOCK)

 if [[ $HOW_MANY_BLOCKS -gt 1 ]]; then
   change_color bold red_bg
   centertext_fullrow "ULTIMI BLOCCHI" "*"
   change_color reset
   echo
   COL1="BLOCK"
   COL2="TIME"
   COL3="TIME TO NEXT"
   COL4="SIZE"
   COL5="TRANSACTIONS"

   ## COLOR FORMAT ##
   str1=$(change_color bold yellow underline)
   str2=$(change_color reset)
   FCOL1="$str1$COL1$str2"
   ##################

   SIZE1=${#BLOCKS}; SIZE1=$((SIZE1 + 2));
   if [[ $SIZE1 -lt ${#COL1} ]]; then SIZE1=${#COL1}; fi
   SIZE2=8 #hh:mm:ss
   SIZE3=14  #xxh yym zzs
   SIZE4=10   #0000 XB
   SIZE5=12

   FORMAT1="%2s %-"$SIZE1"s %3s %-"$SIZE2"s %3s %-"$SIZE3"s %3s %-"$SIZE4"s %3s %-"$SIZE5"s %2s"
   FORMAT2="%2s %"$SIZE1"s %3s %"$SIZE2"s %3s %"$SIZE3"s %3s %"$SIZE4"s %3s %"$SIZE5"s %2s"

   #change_color bold
   printf "$FORMAT1\n" "| " "$COL1" " | " "$COL2" " | " "$COL3" " | " "$COL4" " | " "$COL5" " |"
   #change_color reset

   for ((i=0;i<$HOW_MANY_BLOCKS;i++))
   do
     THIS_BLOCK_NUMBER=$((LAST_BLOCK_NUMBER - i))
     if [[ $i -eq 0 ]]; then
       THIS_BLOCK_TIMESTAMP=${BLOCK_TIME[$THIS_BLOCK_NUMBER]}
       THIS_BLOCK_TIME="($TIME_FROM_LAST_BLOCK fa)"
     else
       NEXT_BLOCK_TIMESTAMP=$THIS_BLOCK_TIMESTAMP
       THIS_BLOCK_TIMESTAMP=${BLOCK_TIME[$THIS_BLOCK_NUMBER]}
       THIS_BLOCK_TIME_SEC=$((NEXT_BLOCK_TIMESTAMP - THIS_BLOCK_TIMESTAMP))
       THIS_BLOCK_TIME=$(seconds_converter $THIS_BLOCK_TIME_SEC)
     fi
     THIS_BLOCK_NUM=${BLOCK_HEIGHT[$THIS_BLOCK_NUMBER]}
     THIS_BLOCK_SIZE=${BLOCK_SIZE[$THIS_BLOCK_NUMBER]}
     THIS_BLOCK_NTX=${BLOCK_NTX[$THIS_BLOCK_NUMBER]}
     THIS_BLOCK_ORE=$(date -d @"$THIS_BLOCK_TIMESTAMP" +"%H:%M:%S")
     THIS_BLOCK_SIZE_HR=$(human_readable_bytes $THIS_BLOCK_SIZE)

     printf "$FORMAT2\n" "| " "#$THIS_BLOCK_NUM" " | " "$THIS_BLOCK_ORE" " | " "$THIS_BLOCK_TIME" " | " "$THIS_BLOCK_SIZE_HR" " | " "$THIS_BLOCK_NTX" " |"
   done
 else
   LB_NUM=$LAST_BLOCK_NUMBER
   LB_TIME=${BLOCK_TIME[$LAST_BLOCK_NUMBER]}
   LB_SIZE=${BLOCK_SIZE[$LAST_BLOCK_NUMBER]}
   LB_NTX=${BLOCK_NTX[$LAST_BLOCK_NUMBER]}
   change_color bold red_bg
   centertext_fullrow "ULTIMO BLOCCO" "*"
   change_color reset
   echo
   echo "Blocco numero: $LB_NUM"
   READABLE_DATE=$(readable_date $LB_TIME)
   echo "Aggiunto il: $READABLE_DATE ($TIME_FROM_LAST_BLOCK fa)"
   echo "Hash: $BLOCK_HASH"
   LB_SIZE_HR=$(human_readable_bytes $LB_SIZE)
   echo "Dimensione: $LB_SIZE_HR"
   echo "Numero di transazioni: $LB_NTX"
 fi

 WAIT_TIME=$REFRESH
 firstrun=false
else
 echo "Errore nella lettura della blockchain"
 echo "Stato del network: NON ATTIVO"
 WAIT_TIME=$WAIT_ON_ERROR
fi

 echo
 change_color bold red_bg
 fullrow "*"
 change_color reset

 change_color light
 waitbar $WAIT_TIME
 change_color reset

 if [ $firstrun == true ]; then
  clear
 fi

### Cancello i blocchi vecchi dall'array
if [ ${#BLOCK_HEIGHT[@]} -gt $HOW_MANY_BLOCKS ]; then
  for blocco in ${!BLOCK_HEIGHT[@]}; do
    exclude=$((LAST_BLOCK_NUMBER-HOW_MANY_BLOCKS))
    if [ $blocco -le $exclude ]; then
      unset BLOCK_HEIGHT["$blocco"]
      unset BLOCK_SIZE["$blocco"]
      unset BLOCK_TIME["$blocco"]
      unset BLOCK_NTX["$blocco"]
      unset BLOCK_CONF["$blocco"]
    fi
  done
fi
###

done
