#! /usr/bin/bash


############
# FUNZIONI #
############

print_number(){
  numero=$1
  # salva il segno del numero (se presente)
  if [[ "$numero" =~ ^[+-] ]]; then
    segno="${BASH_REMATCH[0]}"
    numero="${numero#$segno}"
  else
    segno=""
  fi
  # salva la parte intera del numero
  parte_intera=$(echo "$numero" | awk -F. '{print $1}')
  # salva la parte decimale del numero (se presente), con virgola
  if [[ "$numero" =~ \. ]]; then
    parte_decimale=",${numero##*.}"
  else
    parte_decimale=""
  fi
  # aggiunge un punto ogni 3 cifre per le migliaia nella parte intera
  parte_intera_con_virgole=$(echo "$parte_intera" | sed ':a;s/\B[0-9]\{3\}\>/.&/;ta')
  # ricostruisce il numero completo con il segno, la parte intera coi punti e la parte decimale
  numero_con_virgole="${segno}${parte_intera_con_virgole}${parte_decimale}"
  echo $numero_con_virgole
}

fullrow() {
 REPEATS=$(( $COLUMNS / ${#1} ))
 for (( i = 1 ; i <= $REPEATS ; i++ ))
 do
   echo -n "$1"
 done
 LEFTOVER=$(( $COLUMNS % ${#1} ))
 if [[ $LEFTOVER -ne 0 ]]
 then
  SOTTOSTRINGA=${1:0:LEFTOVER}
  echo -n "$SOTTOSTRINGA"
 fi
 echo
}

empty_spaces(){
  for ((i=0;i<$1;i++))
  do
    echo -n " "
  done
}

centertext(){
  text=$@
  len=${#text}
  spaces_l=$((($COLUMNS-$len)/2))
  spaces_r=$((COLUMNS-len-spaces_l))
  empty_spaces $spaces_l
  echo -n "$text"
  empty_spaces $spaces_r
  echo
}

centertext_fullrow(){
 text=$1
 len1=${#1}
 len2=${#2}
 len_tot=$((len1 + 2*len2 + 2))
 if [[ $len_tot -gt $COLUMNS ]]; then
   echo $text
 else
   spaces=$((COLUMNS - len1 - 2))
   spaces_l=$((spaces/2))
   spaces_r=$((spaces-spaces_l))
   repeats_l=$((spaces_l/len2))
   for ((i=1;i<=$repeats_l;i++))
   do
     echo -n "$2"
   done
   leftover_l=$((spaces_l % len2))
   if [[ $leftover_l -ne 0 ]]; then
     sottostringa_l=${2:0:leftover_l}
     echo -n "$sottostringa_l"
   fi
   echo -n " $text "
   repeats_r=$((spaces_r/len2))
   for ((i=1;i<=$repeats_r;i++)); do
     echo -n "$2"
   done
   leftover_r=$((spaces_r % len2))
   if [[ $leftover_r -ne 0 ]]; then
     sottostringa_r=${2:0:leftover_r}
     echo -n "$sottostringa_r"
   fi
   echo
 fi
}

lcr_text(){
  text1=$1
  text2=$2
  text3=$3
  tottext="$text1$text2$text3"
  len=${#tottext}
  min_len=$((len+2))

  if [ -n "$4" ]; then change_color $4; fi
  echo -n $text1
  if [ -n "$4" ]; then change_color reset; fi

  if [[ $min_len -lt $COLUMNS ]]; then
    spaces=$((COLUMNS - len))
    len_l=${#text1}
    len_c=${#text2}
    len_r=${#text3}
    space_l=$(( ((COLUMNS - len_c) / 2) - len_l ))
    space_r=$((spaces - space_l))
    if [[ space_l -lt 1 ]]; then
      space_r=$((space_r+space_l-1))
      space_l=1
    elif [[ space_r -lt 1 ]]; then
      space_l=$((space_l+space_r-1))
      space_r=1
    fi
    empty_spaces $space_l
    echo -n $text2
    empty_spaces $space_r
  else

    if [ -n "$5" ]; then change_color $5; fi
    echo $text2
    if [ -n "$5" ]; then change_color reset; fi

  fi

  if [ -n "$6" ]; then change_color $6; fi
  echo $text3
  if [ -n "$6" ]; then change_color reset; fi

}

lr_text() {
  text1=$1
  text2=""
  text3=$2
  opt1=""
  opt2=""
  if [ $# -gt 2 ]; then
    opt1=$3
    if [ $# -gt 3 ]; then
      opt2=$4
    fi
  fi
  lcr_text "$text1" "$text2" "$text3" "$opt1" "" "$opt2"
}

waitecho() {
 for (( i = 0 ; i < $1 ; i++ ))
 do
  echo -n "."
  sleep 1
 done
 echo
}

waitbar() {
 COLS=$COLUMNS
 TOT_TIME=$1
 attesa=$(bc<<<"scale=2;$TOT_TIME/$COLS")
 for ((i=1;i<=$COLUMNS;i++))
 do
  echo -n "."
  sleep $attesa
 done
 echo
}

human_readable_number() {
 number=$1
 suffisso="${2:-}" #di default nessun suffisso
 prefissi=("" "k" "M" "G" "T" "P" "E" "Z" "Y" "R" "Q")
 scala="${3:-1000}" #di default 1000
 check=$(echo "$number/1" | bc)
 for prefisso in "${prefissi[@]}"; do
   if [[ $check -ge $scala ]]; then
     check=$((check/scala))
     number=$(echo "scale=2; $number / $scala" | bc)
   else
     unit=$prefisso
     break
   fi
 done
 echo "$number$unit$suffisso"
}

human_readable_bytes() {
 human_readable_number $1 "B" 1024
}

seconds_converter() {
  SECONDI=$1
  if [ $SECONDI -lt 0 ]; then
    SECONDI=$((SECONDI * -1))
    TEMPO="negativo"
  else
    TEMPO="positivo"
  fi
  SEC_MIN=60
  SEC_ORA=$(($SEC_MIN*60))
  SEC_GIO=$(($SEC_ORA*24))
  SEC_ANN=$(($SEC_GIO*365))
  SEC_MES=$(($SEC_ANN/12))

  ANNI=$(($SECONDI / $SEC_ANN))
  SEC=$(($SECONDI % $SEC_ANN))
  MESI=$(($SEC / $SEC_MES))
  SEC=$(($SEC % $SEC_MES))
  GIORNI=$(($SEC / $SEC_GIO))
  SEC=$(($SEC % $SEC_GIO))
  ORE=$(($SEC / $SEC_ORA))
  SEC=$(($SEC % $SEC_ORA))
  MINUTI=$(($SEC / $SEC_MIN))
  SECONDI=$(($SEC % $SEC_MIN))

  if [ $TEMPO == "negativo" ]; then echo -n "- "; fi
  if [ $ANNI -gt 0 ]; then echo -n $ANNI; echo -n "y "; fi
  if [ $MESI -gt 0 ]; then echo -n $MESI; echo -n "m "; fi
  if [ $GIORNI -gt 0 ]; then echo -n $GIORNI; echo -n "d "; fi
  if [ $ORE -gt 0 ]; then echo -n $ORE; echo -n "h "; fi
  if [ $MINUTI -gt 0 ]; then echo -n $MINUTI; echo -n "m "; fi
  if [ $SECONDI -gt 0 ]; then echo -n $SECONDI; echo "s"; fi
}

sat2btc() {
  scale=8
  divisore=10
  sats=$1
  if [ $sats -eq 0 ]; then echo $sats; exit; fi
  while [ true ]; do
    if [ $scale -eq 0 ]; then break; fi
    check=$((sats % divisore))
    if [ $check -eq 0 ]; then
      scale=$((scale-1))
      divisore=$((divisore*10))
    else
      break
    fi
  done
  BTC=$(echo "scale=$scale; $sats/100000000" | bc)
  echo $BTC
}

mined_bitcoins() {
  BLOCCO=$1
  REWARD=50
  HALVING=210000
  TOT_BTC_s=0
  REWARD_s=$((REWARD*100000000))
  NUM_HALV=0
  BLOCCHI=$(( $BLOCCO + 1)) #Si conta anche il blocco 0
  while [ $BLOCCHI -gt 0 ]; do
    if [ $BLOCCHI -gt $HALVING ]; then
      TOT_BTC_s=$((TOT_BTC_s + (HALVING * REWARD_s) ))
      BLOCCHI=$((BLOCCHI - HALVING))
      REWARD_s=$((REWARD_s / 2))
      NUM_HALV=$((NUM_HALV + 1))
    else
      TOT_BTC_s=$((TOT_BTC_s + (BLOCCHI * REWARD_s) ))
      BLOCCHI=0
    fi
  done
  TOT_BTC=$(sat2btc $TOT_BTC_s)
  REWARD=$(sat2btc $REWARD_s)
  echo $TOT_BTC
}

get_halving_number() {
  BLOCCO=$1
  HALVING=$((BLOCCO / 210000))
  if [ $HALVING -gt 33 ]; then HALVING=33; fi
  echo $HALVING
}

get_reward() {
  BLOCCO=$1
  REWARD=$((50*10**8)) #50 BTC in satoshi
  HALVING=$(get_halving_number $BLOCCO)
  while [ true ]; do
    if [ $HALVING -eq 0 ]; then break; fi
    REWARD=$((REWARD / 2))
    HALVING=$((HALVING -1))
  done
  REW=$(sat2btc $REWARD)
  echo $REW
}

halving_progress() {
 BLOCK=$1
 BLOCKS_FROM_HALVING=$(($BLOCK % 210000))
 LAST_HALVING=$(($BLOCK-$BLOCKS_FROM_HALVING))
 NEXT_HALVING=$(($LAST_HALVING + 210000))
 BLOCKS_TO_HALVING=$(($NEXT_HALVING - $BLOCK))
 BLOCKS_FROM_HALVING=$(($BLOCK - $LAST_HALVING))
 LAST_HALV_NUM=$(get_halving_number $BLOCK)
 NEXT_HALV_NUM=$((LAST_HALV_NUM + 1))
 if [[ $2 -eq 1 ]]; then
   L1_STRING="HALV #$LAST_HALV_NUM <"
   L2_STRING="| $BLOCKS_FROM_HALVING |"
   R1_STRING="> HALV #$NEXT_HALV_NUM"
   R2_STRING="| $BLOCKS_TO_HALVING |"
   C_STRING="(X)"
 elif [[ $2 -eq 2 ]]; then
   L1_STRING="HALV #$LAST_HALV_NUM"
   L2_STRING=" ($BLOCKS_FROM_HALVING) <"
   R1_STRING="HALV #$NEXT_HALV_NUM"
   R2_STRING="> ($BLOCKS_TO_HALVING) "
   C_STRING="O"
 fi
 MIN_STRING="$L1_STRING$L2_STRING$C_STRING$R1_STRING$R2_STRING"
 MIN_STR_LEN=${#MIN_STRING}
 if [ $MIN_STR_LEN -lt $COLUMNS ]; then
  TOT_BAR=$(($COLUMNS - $MIN_STR_LEN))
  BLOCKS_PER_SPACE=$(echo "scale=5; 210000 / $TOT_BAR" | bc)
  L_SPACES=$(echo "scale=0; $BLOCKS_FROM_HALVING / $BLOCKS_PER_SPACE" | bc)
  R_SPACES=$((TOT_BAR - L_SPACES))
  L_HALF1=$((L_SPACES / 2))
  L_HALF2=$((L_SPACES - L_HALF1))
  R_HALF2=$((R_SPACES / 2))
  R_HALF1=$((R_SPACES - R_HALF2))
  if [[ $2 -eq 1 ]]; then
    echo -n $L1_STRING
    for ((i=1;i<=$L_HALF1;i++)); do echo -n "-"; done
    echo -n $L2_STRING
    for ((i=1;i<=$L_HALF2;i++)); do echo -n "-"; done
    echo -n $C_STRING
    for ((i=1;i<=$R_HALF1;i++)); do echo -n "-"; done
    echo -n $R2_STRING
    echo $R1_STRING
  elif [[ $2 -eq 2 ]]; then
    echo -n "$L1_STRING$L2_STRING"
    for ((i=1;i<=$L_SPACES;i++)); do echo -n "-"; done
    echo -n $C_STRING
    for ((i=1;i<=$R_SPACES;i++)); do echo -n "-"; done
    echo "$R2_STRING$R1_STRING"
  fi
 else
  echo "$L1_STRING $L2_STRING"
  echo "$R2_STRING $R1_STRING"
 fi
}

difficulty_progress() {
 BLOCK=$1
 BLOCKS_FROM_DIFF_CHANGE=$(($BLOCK % 2016))
 LAST_DIFF_CHANGE=$(($BLOCK-$BLOCKS_FROM_DIFF_CHANGE))
 NEXT_DIFF_CHANGE=$(($LAST_DIFF_CHANGE+2016))
 BLOCKS_TO_DIFF_CHANGE=$(($NEXT_DIFF_CHANGE-$BLOCK))
 if [[ $2 -eq 1 ]]; then
   L1_STRING="#$LAST_DIFF_CHANGE <"
   L2_STRING="| $BLOCKS_FROM_DIFF_CHANGE |"
   R1_STRING="> #$NEXT_DIFF_CHANGE"
   R2_STRING="| $BLOCKS_TO_DIFF_CHANGE |"
   C_STRING="(X)"
 elif [[ $2 -eq 2 ]]; then
   L1_STRING="#$LAST_DIFF_CHANGE"
   L2_STRING=" ($BLOCKS_FROM_DIFF_CHANGE) <"
   R1_STRING="#$NEXT_DIFF_CHANGE"
   R2_STRING="> ($BLOCKS_TO_DIFF_CHANGE) "
   C_STRING="O"
 fi
 MIN_STRING="$L1_STRING$L2_STRING$C_STRING$R2_STRING$R1_STRING"
 MIN_STR_LEN=${#MIN_STRING}
 if [ $MIN_STR_LEN -lt $COLUMNS ]; then
  TOT_BAR=$(($COLUMNS - $MIN_STR_LEN))
  BLOCKS_PER_SPACE=$(echo "scale=5; 2016/$TOT_BAR" | bc)
  L_SPACES=$(echo "scale=0; $BLOCKS_FROM_DIFF_CHANGE / $BLOCKS_PER_SPACE" | bc)
  R_SPACES=$((TOT_BAR - L_SPACES))
  L_HALF1=$((L_SPACES / 2))
  L_HALF2=$((L_SPACES - L_HALF1))
  R_HALF2=$((R_SPACES / 2))
  R_HALF1=$((R_SPACES - R_HALF2))
  if [[ $2 -eq 1 ]]; then
    echo -n $L1_STRING
    for ((i=1;i<=$L_HALF1;i++)); do echo -n "-"; done
    echo -n $L2_STRING
    for ((i=1;i<=$L_HALF2;i++)); do echo -n "-"; done
    echo -n $C_STRING
    for ((i=1;i<=$R_HALF1;i++)); do echo -n "-"; done
    echo -n $R2_STRING
    for ((i=1;i<=$R_HALF2;i++)); do echo -n "-"; done
    echo $R1_STRING
  elif [[ $2 -eq 2 ]]; then
    echo -n "$L1_STRING$L2_STRING"
    for ((i=1;i<=$L_SPACES;i++)); do echo -n "-"; done
    echo -n $C_STRING
    for ((i=1;i<=$R_SPACES;i++)); do echo -n "-"; done
    echo "$R2_STRING$R1_STRING"
  fi
 else
  echo "$L1_STRING $L2_STRING"
  echo "$R2_STRING $R1_STRING"
 fi
}

readable_date(){
  READABLE_DATE=$(date -d @"$1" +"%d/%m/%Y alle %H:%M:%S")
  echo $READABLE_DATE
}

change_color() {
 part1="\033["
 part2="m"
 string=""
 for var in "$@"; do
  col=""
  case $var in
    bold)
      col=1
    ;;
    light)
      col=2
    ;;
    italicus)
      col=3
    ;;
    underline)
      col=4
    ;;
    blink)
      col=5
    ;;
    inverted)
      col=7
    ;;
    stroke)
      col=9
    ;;
    black)
      col=30
    ;;
    red)
      col=31
    ;;
    green)
      col=32
    ;;
    yellow)
      col=33
    ;;
    blue)
      col=34
    ;;
    purple)
      col=35
    ;;
    cyan)
      col=36
    ;;
    black_bg)
      col=40
    ;;
    red_bg)
      col=41
    ;;
    green_bg)
      col=42
    ;;
    yellow_bg)
      col=43
    ;;
    blue_bg)
      col=44
    ;;
    purple_bg)
      col=45
    ;;
    cyan_bg)
      col=46
    ;;
    grey_bg)
      col=47
    ;;
    reset)
      col=0
    ;;
  esac
  if [[ "$col" != "" ]]; then string="$string$part1$col$part2"; fi
 done

 if [[ "$string" != "" ]]; then
  echo -ne "$string"
 fi
}

get_block_time(){
  BLOCK_HASH=`$CLI getblockhash $1`
  BLOCK=`$CLI getblock $BLOCK_HASH`
  BLOCK_TIME=`echo $BLOCK | jq '.time'`
  echo -n $BLOCK_TIME
}
